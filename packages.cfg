[group externals]
packages = python, ipython, fftw, root
environment = group:buildtools


[package cmake] 
version = {cmake_version}
features = tarball prepare makemake tarpack modulesfile
source_url = http://www.cmake.org/files/v{version_2digit}/{source_archive_file}
unpacked_target = bootstrap
prepare_cmd = ../../{source_dir}/{source_unpacked}/bootstrap
prepare_cmd_options = --prefix={install_dir}
prepare_target = cmake_install.cmake
build_target = bin/cmake
install_target = bin/cmake
export_PATH = prepend:{install_dir}/bin
userenv_PATH = {export_PATH}

[package modules]
version = 3.2.10
features = tarball, autoconf, makemake
source_url = http://prdownloads.sourceforge.net/{package}/{source_archive_file}
unpacked_target = configure
#patch_url = lbne/{package}-{version}.patch
#patch_cmd_options = -d {package}-{version} -p1
prepare_cmd_options = --without-x --with-tcl-ver=8.5 --with-tclx-ver=8.5
build_target = modulecmd
install_target = Modules/{version}/bin/modulecmd
# Modules will self-manage version
install_dir = {PREFIX}


[package python]
version = {python_version}
features = tarball, autoconf, makemake, tarpack, modulesfile
source_unpacked = Python-{version}
source_archive_file = {source_unpacked}.tgz
source_url = http://www.python.org/ftp/{package}/{version}/{source_archive_file}
unpacked_target = README
prepare_cmd_options = --prefix={install_dir} --enable-shared
build_target = python
install_target = bin/python
export_PATH = prepend:{install_dir}/bin
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
# set this so we do not include any user-specific .local installation during the build
export_PYTHONNOUSERSITE=yes
userenv_PATH = {export_PATH}
userenv_LD_LIBRARY_PATH = {export_LD_LIBRARY_PATH}
# in general it is good to set this for users too.  On Debian systems
# things in dist-packages will polute the sys.path.  Setting it will
# limit run time to only include what Python we explicitly provide
# which is safer.  Experts may unset it and deal with the
# consequences.
userenv_PYTHONNOUSERSITE=yes

[package ipython]
version = {ipython_version}
features = tarball, pypackage, tarpack, modulesfile
install_dir = {python_install_dir}
environment = package:python
depends = unpack:python_install
source_url = https://github.com/ipython/ipython/releases/download/rel-{version}/ipython-{version}.tar.gz
unpacked_target = setup.py
build_target = build/lib/IPython/__init__.py
install_target = bin/ipython


[package fftw]
version = {fftw_version}
features = tarball, autoconf, makemake, tarpack, modulesfile
source_url = http://www.fftw.org/{package}-{version}.tar.gz
source_url_checksum = md5:2edab8c06b24feeb3b82bbb3ebf3e7b3
unpacked_target = README
prepare_cmd_options = --prefix={install_dir} --enable-shared
build_target = .libs/libfftw3.so
install_target = lib/libfftw3.so
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
userenv_LD_LIBRARY_PATH = {export_LD_LIBRARY_PATH}


[package root]
version = {root_version}
environment = group:buildtools, package:python, package:fftw, package:gcc
#, package:gccxml
depends = prepare:python_install, prepare:fftw_install, prepare:gcc_install
#, prepare:gccxml_install
features = vcs, cmake, makemake, tarpack, modulesfile
vcs_tag = v{version_dashed}
vcs_flavor = git
source_url = http://root.cern.ch/git/root.git
source_unpacked = root-{version}
unpacked_target = CMakeLists.txt
prepare_cmd_options = -Dbuiltin_xrootd=ON -Dcxx11=ON -Dpythia6=OFF -Dminuit2=ON -Dpython=ON -DPYTHON_LIBRARY={python_install_dir}/lib/libpython2.7.so -DPYTHON_INCLUDE_DIR={python_install_dir}/include/python2.7 -DFFTW_INCLUDE_DIR={fftw_install_dir}/include -DFFTW_LIBRARY={fftw_install_dir}/lib/libfftw3.so
#-DGCCXML_EXECUTABLE={gccxml_install_dir}/bin/gccxml
build_cmd = make
# warning: root doesn't always "like" being built with "make -jN"
build_cmd_options = 
build_target = bin/root.exe
install_target = bin/root.exe
buildenv_VERBOSE = set:1
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
export_PATH = prepend:{install_dir}/bin
export_ROOTSYS = set:{install_dir}
export_CMAKE_MODULE_PATH = prepend:{install_dir}/etc/cmake
# not needed during build
userenv_LD_LIBRARY_PATH = prepend:{install_dir}/lib
userenv_PATH = prepend:{install_dir}/bin
userenv_ROOTSYS = set:{install_dir}
userenv_PYTHONPATH = prepend:{install_dir}/lib


